{"file_contents":{"README.md":{"content":"# my-website","size_bytes":12},"app.py":{"content":"from flask import Flask, render_template, request, redirect, url_for, flash, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_login import LoginManager, UserMixin, login_user, logout_user, login_required, current_user\nfrom werkzeug.security import generate_password_hash, check_password_hash\nfrom werkzeug.utils import secure_filename\nfrom werkzeug.middleware.proxy_fix import ProxyFix\nimport os\nimport pandas as pd\nimport numpy as np\nfrom datetime import datetime, timedelta\nimport json\n\n# Initialize Flask app\napp = Flask(__name__)\napp.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1)  # needed for url_for to generate with https\napp.config['SECRET_KEY'] = os.environ.get('SESSION_SECRET', 'dev-secret-key-change-in-production')\napp.config['SQLALCHEMY_DATABASE_URI'] = os.environ.get('DATABASE_URL', 'sqlite:///' + os.path.join(app.instance_path, 'student_prediction.db'))\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\napp.config['SQLALCHEMY_ENGINE_OPTIONS'] = {\n    'pool_recycle': 300,\n    'pool_pre_ping': True,\n} if os.environ.get('DATABASE_URL') else {}\napp.config['UPLOAD_FOLDER'] = 'uploads'\napp.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB max file size\n\n# Initialize extensions\ndb = SQLAlchemy(app)\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nlogin_manager.login_view = 'login'\n\n# User loader for Flask-Login\n@login_manager.user_loader\ndef load_user(user_id):\n    return User.query.get(int(user_id))\n\n# Database Models\nclass User(UserMixin, db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True, nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    password_hash = db.Column(db.String(255), nullable=False)\n    role = db.Column(db.String(20), nullable=False, default='student')  # student, faculty, admin\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    def set_password(self, password):\n        self.password_hash = generate_password_hash(password)\n    \n    def check_password(self, password):\n        return check_password_hash(self.password_hash, password)\n\nclass Student(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    student_id = db.Column(db.String(20), unique=True, nullable=False)\n    name = db.Column(db.String(100), nullable=False)\n    class_name = db.Column(db.String(20), nullable=False)\n    email = db.Column(db.String(120))\n    phone = db.Column(db.String(20))\n    guardian_email = db.Column(db.String(120))\n    guardian_phone = db.Column(db.String(20))\n    current_risk_level = db.Column(db.String(20), default='safe')  # safe, warning, high_risk\n    risk_score = db.Column(db.Float, default=0.0)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \nclass AttendanceRecord(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    student_id = db.Column(db.String(20), db.ForeignKey('student.student_id'), nullable=False)\n    date = db.Column(db.Date, nullable=False)\n    status = db.Column(db.String(10), nullable=False)  # present, absent, late\n    subject = db.Column(db.String(50))\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n\nclass TestScore(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    student_id = db.Column(db.String(20), db.ForeignKey('student.student_id'), nullable=False)\n    subject = db.Column(db.String(50), nullable=False)\n    test_name = db.Column(db.String(100), nullable=False)\n    score = db.Column(db.Float, nullable=False)\n    max_score = db.Column(db.Float, nullable=False)\n    test_date = db.Column(db.Date, nullable=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n\nclass Faculty(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    faculty_id = db.Column(db.String(20), unique=True, nullable=False)\n    name = db.Column(db.String(100), nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    phone = db.Column(db.String(20))\n    department = db.Column(db.String(50))\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), unique=True)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n\nclass Assignment(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(200), nullable=False)\n    description = db.Column(db.Text)\n    subject = db.Column(db.String(50), nullable=False)\n    class_name = db.Column(db.String(20), nullable=False)\n    due_date = db.Column(db.DateTime, nullable=False)\n    max_marks = db.Column(db.Float, default=100)\n    faculty_id = db.Column(db.Integer, db.ForeignKey('faculty.id'), nullable=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n\nclass AssignmentSubmission(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    assignment_id = db.Column(db.Integer, db.ForeignKey('assignment.id'), nullable=False)\n    student_id = db.Column(db.String(20), db.ForeignKey('student.student_id'), nullable=False)\n    submitted_at = db.Column(db.DateTime)\n    marks_obtained = db.Column(db.Float)\n    status = db.Column(db.String(20), default='pending')  # pending, submitted, graded, missing\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n\nclass Exam(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(200), nullable=False)\n    subject = db.Column(db.String(50), nullable=False)\n    class_name = db.Column(db.String(20), nullable=False)\n    exam_date = db.Column(db.DateTime, nullable=False)\n    max_marks = db.Column(db.Float, nullable=False)\n    exam_type = db.Column(db.String(20), nullable=False)  # internal, final, quiz\n    faculty_id = db.Column(db.Integer, db.ForeignKey('faculty.id'), nullable=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n\nclass ExamResult(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    exam_id = db.Column(db.Integer, db.ForeignKey('exam.id'), nullable=False)\n    student_id = db.Column(db.String(20), db.ForeignKey('student.student_id'), nullable=False)\n    marks_obtained = db.Column(db.Float, nullable=False)\n    percentage = db.Column(db.Float)\n    grade = db.Column(db.String(5))\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n\nclass Fee(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    student_id = db.Column(db.String(20), db.ForeignKey('student.student_id'), nullable=False)\n    fee_type = db.Column(db.String(50), nullable=False)  # tuition, library, lab, hostel\n    amount = db.Column(db.Float, nullable=False)\n    due_date = db.Column(db.Date, nullable=False)\n    paid_amount = db.Column(db.Float, default=0.0)\n    status = db.Column(db.String(20), default='pending')  # pending, partial, paid, overdue\n    payment_date = db.Column(db.Date)\n    academic_year = db.Column(db.String(10), nullable=False)\n    semester = db.Column(db.String(10))\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n\nclass Timetable(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    class_name = db.Column(db.String(20), nullable=False)\n    subject = db.Column(db.String(50), nullable=False)\n    faculty_id = db.Column(db.Integer, db.ForeignKey('faculty.id'), nullable=False)\n    day_of_week = db.Column(db.String(10), nullable=False)  # monday, tuesday, etc.\n    start_time = db.Column(db.Time, nullable=False)\n    end_time = db.Column(db.Time, nullable=False)\n    room_number = db.Column(db.String(20))\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n\nclass RiskAssessment(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    student_id = db.Column(db.String(20), db.ForeignKey('student.student_id'), nullable=False)\n    risk_level = db.Column(db.String(20), nullable=False)\n    risk_score = db.Column(db.Integer, nullable=False)  # Changed to Integer for new scoring system\n    attendance_risk = db.Column(db.Boolean, default=False)\n    assignment_risk = db.Column(db.Boolean, default=False)\n    marks_risk = db.Column(db.Boolean, default=False)\n    fee_risk = db.Column(db.Boolean, default=False)\n    factors = db.Column(db.Text)  # JSON string of detailed risk factors\n    recommendations = db.Column(db.Text)  # Academic and financial recommendations\n    assessment_date = db.Column(db.DateTime, default=datetime.utcnow)\n    created_by = db.Column(db.Integer, db.ForeignKey('user.id'))\n\n# Risk Scoring Functions\ndef calculate_attendance_percentage(student_id, days=30):\n    \"\"\"Calculate attendance percentage for the last N days\"\"\"\n    from_date = datetime.now().date() - timedelta(days=days)\n    \n    total_records = AttendanceRecord.query.filter(\n        AttendanceRecord.student_id == student_id,\n        AttendanceRecord.date >= from_date\n    ).count()\n    \n    if total_records == 0:\n        return 100  # No records means no risk\n    \n    present_records = AttendanceRecord.query.filter(\n        AttendanceRecord.student_id == student_id,\n        AttendanceRecord.date >= from_date,\n        AttendanceRecord.status == 'present'\n    ).count()\n    \n    return (present_records / total_records) * 100\n\ndef count_missing_assignments(student_id):\n    \"\"\"Count missing assignments for a student\"\"\"\n    # Count explicitly marked missing assignments\n    missing_count = AssignmentSubmission.query.filter(\n        AssignmentSubmission.student_id == student_id,\n        AssignmentSubmission.status == 'missing'\n    ).count()\n    \n    # Count assignments that are past due and not submitted by this specific student\n    current_time = datetime.now()\n    \n    # Get all assignments that are past due\n    past_due_assignment_ids = db.session.query(Assignment.id).filter(\n        Assignment.due_date < current_time\n    ).subquery()\n    \n    # Get submissions by this student for past due assignments\n    student_submissions = db.session.query(AssignmentSubmission.assignment_id).filter(\n        AssignmentSubmission.student_id == student_id,\n        AssignmentSubmission.assignment_id.in_(past_due_assignment_ids)\n    ).subquery()\n    \n    # Count past due assignments with no submission from this student\n    unsubmitted_count = db.session.query(past_due_assignment_ids.c.id).filter(\n        past_due_assignment_ids.c.id.notin_(student_submissions)\n    ).count()\n    \n    return missing_count + unsubmitted_count\n\ndef calculate_internal_marks_percentage(student_id):\n    \"\"\"Calculate average internal marks percentage\"\"\"\n    internal_exams = db.session.query(ExamResult).join(Exam).filter(\n        ExamResult.student_id == student_id,\n        Exam.exam_type == 'internal'\n    ).all()\n    \n    if not internal_exams:\n        return 100  # No records means no risk\n    \n    total_percentage = sum(result.percentage or 0 for result in internal_exams)\n    return total_percentage / len(internal_exams)\n\ndef check_fee_status(student_id):\n    \"\"\"Check if student has pending or overdue fees\"\"\"\n    current_date = datetime.now().date()\n    \n    # Check for overdue fees\n    overdue_fees = Fee.query.filter(\n        Fee.student_id == student_id,\n        Fee.due_date < current_date,\n        Fee.status.in_(['pending', 'partial'])\n    ).count()\n    \n    # Check for pending fees\n    pending_fees = Fee.query.filter(\n        Fee.student_id == student_id,\n        Fee.status == 'pending'\n    ).count()\n    \n    return overdue_fees > 0 or pending_fees > 0\n\ndef update_student_risk_score(student_id):\n    \"\"\"Update risk score for a student based on enhanced algorithm\"\"\"\n    student = Student.query.filter_by(student_id=student_id).first()\n    if not student:\n        return\n    \n    risk_score = 0\n    risk_factors = []\n    \n    # 1. Attendance Risk (+1 if <70%)\n    attendance_percentage = calculate_attendance_percentage(student_id)\n    attendance_risk = attendance_percentage < 70\n    if attendance_risk:\n        risk_score += 1\n        risk_factors.append(f\"Low attendance: {attendance_percentage:.1f}%\")\n    \n    # 2. Assignment Risk (+1 if >1 missing)\n    missing_assignments = count_missing_assignments(student_id)\n    assignment_risk = missing_assignments > 1\n    if assignment_risk:\n        risk_score += 1\n        risk_factors.append(f\"Missing assignments: {missing_assignments}\")\n    \n    # 3. Internal Marks Risk (+1 if <50%)\n    internal_marks = calculate_internal_marks_percentage(student_id)\n    marks_risk = internal_marks < 50\n    if marks_risk:\n        risk_score += 1\n        risk_factors.append(f\"Low internal marks: {internal_marks:.1f}%\")\n    \n    # 4. Fee Risk (+2 if pending/overdue)\n    fee_risk = check_fee_status(student_id)\n    if fee_risk:\n        risk_score += 2\n        risk_factors.append(\"Pending/overdue fees\")\n    \n    # Determine risk level\n    if risk_score == 0:\n        risk_level = 'safe'\n    elif risk_score <= 2:\n        risk_level = 'warning'\n    else:\n        risk_level = 'high_risk'\n    \n    # Update student record\n    student.risk_score = risk_score\n    student.current_risk_level = risk_level\n    \n    # Create or update risk assessment\n    assessment = RiskAssessment.query.filter_by(\n        student_id=student_id\n    ).order_by(RiskAssessment.assessment_date.desc()).first()\n    \n    # Only create new assessment if risk level changed or it's been more than a day\n    create_new = (not assessment or \n                 assessment.risk_level != risk_level or\n                 (datetime.now() - assessment.assessment_date).days >= 1)\n    \n    if create_new:\n        new_assessment = RiskAssessment(\n            student_id=student_id,\n            risk_level=risk_level,\n            risk_score=risk_score,\n            attendance_risk=attendance_risk,\n            assignment_risk=assignment_risk,\n            marks_risk=marks_risk,\n            fee_risk=fee_risk,\n            factors=json.dumps(risk_factors),\n            recommendations=generate_recommendations(risk_factors)\n        )\n        db.session.add(new_assessment)\n    \n    db.session.commit()\n    return risk_score\n\ndef generate_recommendations(risk_factors):\n    \"\"\"Generate academic and financial recommendations based on risk factors\"\"\"\n    recommendations = []\n    \n    for factor in risk_factors:\n        if \"attendance\" in factor.lower():\n            recommendations.append(\"Academic: Schedule regular check-ins, provide attendance incentives\")\n        elif \"assignment\" in factor.lower():\n            recommendations.append(\"Academic: Provide assignment reminders, offer extended deadlines if needed\")\n        elif \"marks\" in factor.lower():\n            recommendations.append(\"Academic: Arrange tutoring sessions, review study methods\")\n        elif \"fee\" in factor.lower():\n            recommendations.append(\"Financial: Contact for payment plan, discuss scholarship opportunities\")\n    \n    if not recommendations:\n        recommendations.append(\"Continue current support and monitor progress\")\n    \n    return \"; \".join(recommendations)\n\n# Routes\n@app.route('/')\ndef index():\n    if current_user.is_authenticated:\n        if current_user.role == 'admin':\n            return redirect(url_for('admin_dashboard'))\n        elif current_user.role == 'faculty':\n            return redirect(url_for('faculty_dashboard'))\n        else:\n            return redirect(url_for('student_dashboard'))\n    return render_template('index.html')\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    if request.method == 'POST':\n        username = request.form['username']\n        password = request.form['password']\n        user = User.query.filter_by(username=username).first()\n        \n        if user and user.check_password(password):\n            login_user(user)\n            flash('Login successful!', 'success')\n            return redirect(url_for('index'))\n        else:\n            flash('Invalid username or password!', 'error')\n    \n    return render_template('login.html')\n\n@app.route('/register', methods=['GET', 'POST'])\ndef register():\n    if request.method == 'POST':\n        username = request.form['username']\n        email = request.form['email']\n        password = request.form['password']\n        role = request.form.get('role', 'student')  # Allow faculty registration\n        \n        # Check if user already exists\n        if User.query.filter_by(username=username).first():\n            flash('Username already exists!', 'error')\n            return render_template('register.html')\n        \n        if User.query.filter_by(email=email).first():\n            flash('Email already registered!', 'error')\n            return render_template('register.html')\n        \n        # Create new user\n        user = User(username=username, email=email, role=role)\n        user.set_password(password)\n        \n        db.session.add(user)\n        db.session.flush()  # Get the user ID\n        \n        # Create Faculty record if registering as faculty\n        if role == 'faculty':\n            faculty = Faculty(\n                faculty_id=f\"FAC{user.id:04d}\",\n                name=username,  # Use username as name initially\n                email=email,\n                user_id=user.id\n            )\n            db.session.add(faculty)\n        \n        db.session.commit()\n        \n        flash('Registration successful! Please login.', 'success')\n        return redirect(url_for('login'))\n    \n    return render_template('register.html')\n\n@app.route('/logout')\n@login_required\ndef logout():\n    logout_user()\n    flash('You have been logged out.', 'info')\n    return redirect(url_for('index'))\n\n@app.route('/admin/dashboard')\n@login_required\ndef admin_dashboard():\n    if current_user.role != 'admin':\n        flash('Access denied!', 'error')\n        return redirect(url_for('index'))\n    \n    # Get student statistics\n    total_students = Student.query.count()\n    safe_count = Student.query.filter_by(current_risk_level='safe').count()\n    warning_count = Student.query.filter_by(current_risk_level='warning').count()\n    high_risk_count = Student.query.filter_by(current_risk_level='high_risk').count()\n    \n    # Get recent risk assessments\n    recent_assessments = RiskAssessment.query.order_by(RiskAssessment.assessment_date.desc()).limit(10).all()\n    \n    # Get all students with their risk levels\n    students = Student.query.all()\n    \n    return render_template('admin_dashboard.html', \n                         total_students=total_students,\n                         safe_count=safe_count,\n                         warning_count=warning_count,\n                         high_risk_count=high_risk_count,\n                         students=students,\n                         recent_assessments=recent_assessments)\n\n@app.route('/faculty/dashboard')\n@login_required\ndef faculty_dashboard():\n    if current_user.role != 'faculty':\n        flash('Access denied!', 'error')\n        return redirect(url_for('index'))\n    \n    # Get all students and their risk assessments\n    students = Student.query.all()\n    \n    # Update risk scores for all students\n    for student in students:\n        update_student_risk_score(student.student_id)\n    \n    # Get updated statistics\n    total_students = len(students)\n    safe_count = Student.query.filter_by(current_risk_level='safe').count()\n    warning_count = Student.query.filter_by(current_risk_level='warning').count()\n    high_risk_count = Student.query.filter_by(current_risk_level='high_risk').count()\n    \n    # Get recent risk assessments\n    recent_assessments = RiskAssessment.query.order_by(RiskAssessment.assessment_date.desc()).limit(10).all()\n    \n    return render_template('faculty_dashboard.html', \n                         students=students,\n                         total_students=total_students,\n                         safe_count=safe_count,\n                         warning_count=warning_count,\n                         high_risk_count=high_risk_count,\n                         recent_assessments=recent_assessments)\n\n@app.route('/student/dashboard')\n@login_required\ndef student_dashboard():\n    if current_user.role != 'student':\n        flash('Access denied!', 'error')\n        return redirect(url_for('index'))\n    \n    # For now, show a simple student dashboard\n    # In a real implementation, you'd link User to Student via student_id\n    return render_template('student_dashboard.html')\n\n@app.route('/upload', methods=['GET', 'POST'])\n@login_required\ndef upload_data():\n    if current_user.role != 'admin':\n        flash('Access denied!', 'error')\n        return redirect(url_for('index'))\n    \n    if request.method == 'POST':\n        if 'file' not in request.files:\n            flash('No file selected!', 'error')\n            return redirect(request.url)\n        \n        file = request.files['file']\n        data_type = request.form['data_type']\n        \n        if not file.filename:\n            flash('No file selected!', 'error')\n            return redirect(request.url)\n        \n        if file and file.filename and allowed_file(file.filename):\n            filename = secure_filename(file.filename)\n            filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n            file.save(filepath)\n            \n            # Process the uploaded file\n            try:\n                if data_type == 'students':\n                    process_student_data(filepath)\n                elif data_type == 'attendance':\n                    process_attendance_data(filepath)\n                elif data_type == 'test_scores':\n                    process_test_scores_data(filepath)\n                \n                flash('File uploaded and processed successfully!', 'success')\n                os.remove(filepath)  # Clean up uploaded file\n            except Exception as e:\n                flash(f'Error processing file: {str(e)}', 'error')\n                if os.path.exists(filepath):\n                    os.remove(filepath)\n        else:\n            flash('Invalid file format. Please upload CSV or Excel files.', 'error')\n    \n    return render_template('upload.html')\n\n# Faculty Management Routes\n@app.route('/faculty/timetable')\n@login_required\ndef manage_timetable():\n    if current_user.role != 'faculty':\n        flash('Access denied!', 'error')\n        return redirect(url_for('index'))\n    \n    faculty = Faculty.query.filter_by(user_id=current_user.id).first()\n    if not faculty:\n        flash('Faculty profile not found!', 'error')\n        return redirect(url_for('index'))\n    \n    timetable = Timetable.query.filter_by(faculty_id=faculty.id).all()\n    return render_template('manage_timetable.html', timetable=timetable)\n\n@app.route('/faculty/assignments')\n@login_required\ndef manage_assignments():\n    if current_user.role != 'faculty':\n        flash('Access denied!', 'error')\n        return redirect(url_for('index'))\n    \n    faculty = Faculty.query.filter_by(user_id=current_user.id).first()\n    if not faculty:\n        flash('Faculty profile not found!', 'error')\n        return redirect(url_for('index'))\n    \n    assignments = Assignment.query.filter_by(faculty_id=faculty.id).all()\n    return render_template('manage_assignments.html', assignments=assignments)\n\n@app.route('/faculty/exams')\n@login_required  \ndef manage_exams():\n    if current_user.role != 'faculty':\n        flash('Access denied!', 'error')\n        return redirect(url_for('index'))\n    \n    faculty = Faculty.query.filter_by(user_id=current_user.id).first()\n    if not faculty:\n        flash('Faculty profile not found!', 'error')\n        return redirect(url_for('index'))\n        \n    exams = Exam.query.filter_by(faculty_id=faculty.id).all()\n    return render_template('manage_exams.html', exams=exams)\n\n@app.route('/faculty/fees')\n@login_required\ndef manage_fees():\n    if current_user.role != 'faculty':\n        flash('Access denied!', 'error')\n        return redirect(url_for('index'))\n        \n    fees = Fee.query.all()  # Faculty can view all fees for management\n    return render_template('manage_fees.html', fees=fees)\n\ndef allowed_file(filename):\n    \"\"\"Check if uploaded file has an allowed extension\"\"\"\n    ALLOWED_EXTENSIONS = {'csv', 'xlsx', 'xls'}\n    return '.' in filename and \\\n           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n\ndef process_student_data(filepath):\n    \"\"\"Process uploaded student data file\"\"\"\n    if filepath.endswith('.csv'):\n        df = pd.read_csv(filepath)\n    else:\n        df = pd.read_excel(filepath)\n    \n    for _, row in df.iterrows():\n        student = Student.query.filter_by(student_id=str(row['student_id'])).first()\n        if not student:\n            student = Student(\n                student_id=str(row['student_id']),\n                name=row['name'],\n                class_name=row['class'],\n                email=row.get('email', ''),\n                phone=row.get('phone', ''),\n                guardian_email=row.get('guardian_email', ''),\n                guardian_phone=row.get('guardian_phone', '')\n            )\n            db.session.add(student)\n    \n    db.session.commit()\n\ndef process_attendance_data(filepath):\n    \"\"\"Process uploaded attendance data file\"\"\"\n    if filepath.endswith('.csv'):\n        df = pd.read_csv(filepath)\n    else:\n        df = pd.read_excel(filepath)\n    \n    for _, row in df.iterrows():\n        # Check if record already exists\n        existing = AttendanceRecord.query.filter_by(\n            student_id=str(row['student_id']),\n            date=pd.to_datetime(row['date']).date(),\n            subject=row.get('subject', '')\n        ).first()\n        \n        if not existing:\n            record = AttendanceRecord(\n                student_id=str(row['student_id']),\n                date=pd.to_datetime(row['date']).date(),\n                status=row['status'],\n                subject=row.get('subject', '')\n            )\n            db.session.add(record)\n    \n    db.session.commit()\n\ndef process_test_scores_data(filepath):\n    \"\"\"Process uploaded test scores data file\"\"\"\n    if filepath.endswith('.csv'):\n        df = pd.read_csv(filepath)\n    else:\n        df = pd.read_excel(filepath)\n    \n    for _, row in df.iterrows():\n        score = TestScore(\n            student_id=str(row['student_id']),\n            subject=row['subject'],\n            test_name=row['test_name'],\n            score=float(row['score']),\n            max_score=float(row['max_score']),\n            test_date=pd.to_datetime(row['test_date']).date()\n        )\n        db.session.add(score)\n    \n    db.session.commit()\n\n# Database initialization (legacy function, replaced by main initialization)\ndef create_tables():\n    \"\"\"Create database tables (deprecated - use main block initialization)\"\"\"\n    db.create_all()\n\n# Initialize application when imported\n# Ensure directories exist\nos.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)\ntry:\n    os.makedirs(app.instance_path, exist_ok=True)\nexcept OSError:\n    pass  # Directory already exists or can't create (not critical)\n\n# Initialize database and create admin user\nwith app.app_context():\n    # Create all database tables\n    db.create_all()\n    \n    # Create default admin user if not exists\n    admin = User.query.filter_by(username='admin').first()\n    if not admin:\n        admin_username = os.environ.get('ADMIN_USERNAME', 'admin')\n        admin_password = os.environ.get('ADMIN_PASSWORD', 'admin123')\n        admin = User(username=admin_username, email='admin@school.edu', role='admin')\n        admin.set_password(admin_password)\n        db.session.add(admin)\n        db.session.commit()\n        print(f\"Created admin user: {admin_username}\")\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=True)","size_bytes":27422},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"email-validator>=2.3.0\",\n    \"flask>=3.1.2\",\n    \"flask-login>=0.6.3\",\n    \"flask-sqlalchemy>=3.1.1\",\n    \"gunicorn>=23.0.0\",\n    \"numpy>=2.3.3\",\n    \"openpyxl>=3.1.5\",\n    \"pandas>=2.3.2\",\n    \"plotly>=6.3.0\",\n    \"psycopg2-binary>=2.9.10\",\n    \"requests>=2.32.5\",\n    \"scikit-learn>=1.7.2\",\n    \"werkzeug>=3.1.3\",\n]\n","size_bytes":465},"replit.md":{"content":"# Student Prediction System - Replit Setup\n\n## Overview\nA Flask-based student prediction system for academic risk assessment. The application predicts student performance based on attendance, assignments, test scores, and fees to identify at-risk students early.\n\n## Current State\n- Successfully migrated from SQLite to PostgreSQL for better performance\n- Running on Flask development server with proper proxy configuration  \n- Admin user created with default credentials (admin/admin123)\n- All dependencies installed and working correctly\n\n## Recent Changes (2025-09-25)\n- Configured Flask app for Replit environment with ProxyFix middleware\n- Migrated database from SQLite to PostgreSQL using DATABASE_URL\n- Set up proper workflow on port 5000 with webview output\n- Added database engine options for connection pooling\n- Configured deployment settings for autoscale with gunicorn\n\n## User Preferences\n- Default development setup maintained\n- PostgreSQL preferred over SQLite for production-like testing\n- Frontend workflow priority for immediate user visibility\n\n## Project Architecture\n### Backend\n- **Framework**: Flask with SQLAlchemy ORM\n- **Database**: PostgreSQL (via Replit environment)\n- **Authentication**: Flask-Login with role-based access (admin, faculty, student)\n- **File Uploads**: Secure file handling for Excel/CSV data\n\n### Frontend\n- **Templates**: Jinja2 with Bootstrap styling\n- **Static Assets**: CSS and JavaScript in /static directory\n- **Responsive Design**: Mobile-friendly interface\n\n### Key Models\n- User (authentication)\n- Student (core student data)  \n- AttendanceRecord, TestScore, Fee (performance metrics)\n- RiskAssessment (predictive analysis results)\n- Faculty, Assignment, Exam (academic management)\n\n### Risk Assessment Algorithm\n- Attendance Risk: <70% attendance\n- Assignment Risk: >1 missing assignments  \n- Marks Risk: <50% internal marks\n- Fee Risk: Pending/overdue payments\n- Scoring: 0=safe, 1-2=warning, 3+=high_risk\n\n## Environment Configuration\n- **Port**: 5000 (webview output)\n- **Database**: PostgreSQL via DATABASE_URL\n- **Secrets**: SESSION_SECRET configured\n- **Admin Defaults**: admin/admin123 (change in production)\n\n## File Structure\n- `app.py` - Main Flask application\n- `templates/` - HTML templates with role-based dashboards  \n- `static/` - CSS/JS assets\n- `instance/` - Legacy SQLite database (now unused)\n- `uploads/` - File upload directory (auto-created)\n\n## Deployment\n- **Target**: Autoscale deployment\n- **Server**: Gunicorn with proper binding\n- **Development**: Flask dev server with debug mode","size_bytes":2565},"static/css/custom.css":{"content":"/* Custom styles for Student Dashboard */\n.jumbotron {\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    color: white;\n    border-radius: 10px;\n}\n\n.card {\n    border-radius: 10px;\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    transition: transform 0.2s;\n}\n\n.card:hover {\n    transform: translateY(-2px);\n}\n\n.navbar {\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.progress {\n    border-radius: 10px;\n}\n\n.table th {\n    border-top: none;\n    font-weight: 600;\n    background-color: #f8f9fa;\n}\n\n.badge {\n    font-size: 0.9em;\n    padding: 0.5em 0.7em;\n}\n\n.btn-group-sm > .btn {\n    border-radius: 4px;\n}\n\n/* Risk level colors */\n.risk-safe {\n    background-color: #d4edda;\n    border-left: 4px solid #28a745;\n}\n\n.risk-warning {\n    background-color: #fff3cd;\n    border-left: 4px solid #ffc107;\n}\n\n.risk-high {\n    background-color: #f8d7da;\n    border-left: 4px solid #dc3545;\n}\n\n/* Chat styles for future chatbot */\n.chat-container {\n    height: 400px;\n    overflow-y: auto;\n    border: 1px solid #dee2e6;\n    border-radius: 8px;\n    padding: 15px;\n    background-color: #f8f9fa;\n}\n\n.chat-message {\n    margin-bottom: 15px;\n    padding: 10px;\n    border-radius: 8px;\n}\n\n.chat-message.user {\n    background-color: #007bff;\n    color: white;\n    margin-left: 20%;\n}\n\n.chat-message.bot {\n    background-color: #e9ecef;\n    color: #495057;\n    margin-right: 20%;\n}","size_bytes":1388},"static/js/custom.js":{"content":"// Custom JavaScript for Student Dashboard\n\n// Initialize tooltips\ndocument.addEventListener('DOMContentLoaded', function() {\n    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]'));\n    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {\n        return new bootstrap.Tooltip(tooltipTriggerEl);\n    });\n});\n\n// Chart configuration for future use\nconst chartColors = {\n    safe: '#28a745',\n    warning: '#ffc107', \n    danger: '#dc3545',\n    primary: '#007bff',\n    secondary: '#6c757d'\n};\n\n// Utility functions\nfunction formatDate(dateString) {\n    const options = { year: 'numeric', month: 'short', day: 'numeric' };\n    return new Date(dateString).toLocaleDateString(undefined, options);\n}\n\nfunction getRiskColor(riskLevel) {\n    switch(riskLevel) {\n        case 'safe': return chartColors.safe;\n        case 'warning': return chartColors.warning;\n        case 'high_risk': return chartColors.danger;\n        default: return chartColors.secondary;\n    }\n}\n\n// Future chatbot functionality placeholder\nfunction initChatbot() {\n    console.log('Chatbot initialization placeholder');\n}","size_bytes":1147}},"version":1}